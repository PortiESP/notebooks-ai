import { useState } from 'react'
import s from './section_ai.module.scss'
import { useCallback } from 'react'
import { useContext } from 'react'
import { NotebookContext } from '../../../../utils/notebook_context'
import Section from '../../section'
import Blank from '../../section_types/blank/blank_class'
import Text from '../../section_element/text/text_class'
import parseElementsDataToClassObject from '../../../../utils/parse_eData_to_class'

const DEFAULT_SECTION_DRAFT = {
    id: "preview",
    type: "blank-preview",
    height: 100,
    doNotAccept: true,
    elements: {
        "text-1": new Text({
            text: "Generated by AI",
            x: 10,
            y: 5,
            width: 40,
            height: 10,
        })
    }
}

export default function SectionAI(props) {

    const [prompt, setPrompt] = useState("")
    const { dispatch } = useContext(NotebookContext)
    const [draftSectionData, setDraftSectionData] = useState(DEFAULT_SECTION_DRAFT)
    const [loading, setLoading] = useState(false)

    const handleSend = useCallback(() => {
        setLoading(true)
        fetch(`/api/ai/section?p=${prompt}`)
            .then(res => res.json())
            .then(res => {
                console.log("AI response:", res)
                const response = res.choices[0].message.content
                try {
                    const parsedJSON = JSON.parse(response)
                    const newSection = new Blank({ id: "preview", type: "blank-preview", ...parsedJSON, elements: parseElementsDataToClassObject(parsedJSON.elements) })
                    setDraftSectionData(newSection)
                } 
                catch (e) {console.error("AI response is not a valid section:", response)} 
                finally {setLoading(false)}
            })
    }, [prompt, props.sData])

    const handleClose = useCallback(e => {
        if (e.target.classList.contains(s.wrap)) props.close()
    }, [props])

    const handleAccept = useCallback(() => {
        if (!draftSectionData || draftSectionData.doNotAccept) {
            console.error("Draft section is invalid:", draftSectionData)
            return
        }

        const newSection = new Blank({ id: props.sData.id, title: draftSectionData.title, elements: draftSectionData.elements })
        dispatch({ type: "REPLACE_SECTION", payload: newSection })
        props.close()
    }, [draftSectionData])

    const handleKeyDown = useCallback(e => {
        if (e.key === "Enter") handleSend()
    }, [])

    return (
        <div className={s.wrap} onMouseDown={handleClose}>
            <div className={s.section_ai_inner}>
                <div className={s.ai_input_wrap}>
                    <input type="text" placeholder="AI input" value={prompt} onChange={e => setPrompt(e.target.value)} onKeyDown={handleKeyDown}/>
                    <button onClick={handleSend}>
                        Send
                        {
                            loading &&
                            <div className={s.loading_overlay}>
                                <span className={s.loader}></span>
                            </div>
                        }
                    </button>
                </div>
                <div className={s.ai_section_draft_wrap}>
                    <div className={s.preview_section} onDoubleClick={e => e.stopPropagation()}>
                        <Section sData={draftSectionData} />
                    </div>
                </div>
                <div className={s.ai_buttons}>
                    <div className={s.ai_buttons_inner}>
                        <button onClick={handleAccept} disabled={!draftSectionData || draftSectionData.doNotAccept}>Accept</button>
                        <button onClick={props.close}>Close</button>
                    </div>
                </div>
            </div>
        </div>
    )
}



// ------------------------------------------------------------------------------------------------

